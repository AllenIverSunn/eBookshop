const ktoolkit = require('ktoolkit');
const logger = ktoolkit.logger.output;
const errors = require('../errors');
const getObjectValue = ktoolkit.core.misc.getObjectValue;

class Action {
    static Create(options) {
        return new Action(options);
    }

    constructor(options) {
        this._prehandlers = getObjectValue(options, 'prehandlers', {});
        this._handler = options.handler;
    }

    get prehandlers() {
        return this._prehandlers;
    }

    get handler() {
        return this._handler;
    }

    expressHandler(routable) {
        const context = Object.create(null);

        const asyncHandler = async(req, res) => {
            try {
                for ( const prehandler of routable.prehandlers ) {
                    const options = this.prehandlers[prehandler.key];
                    const isPassed = await prehandler.handler.handle(req, res, context, options);

                    if ( !isPassed ) {
                        return;
                    }
                }

                await this.handler(req, res, context);
            }
            catch (e) {
                logger.error(e);

                if ( e instanceof errors.LogicalError ) {
                    res
                    .status(e.status)
                    .json({
                        error: e
                    });

                    return;
                }

                if ( e instanceof Error ) {
                    res
                    .status(500)
                    .json({
                        error: {
                            id: -1,
                            message: 'Internal error'
                        }
                    });

                    return;
                }

                res
                .status(500)
                .json({
                    error: {
                        id: -2,
                        message: e
                    }
                });
            }
        };

        return function(req, res) {
            asyncHandler(req, res);
        };
    }
}

module.exports = {
    Action
};
