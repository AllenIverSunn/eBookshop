// Usage: 
// const allErrors = defineLogicalErrors({
//     InternalException: {
//         id: 67001,
//         message: 'Server internal exception',
//         status: 500,
//         global: true
//     },
//     NoPrivileges: {
//         id: 67002,
//         message: 'User has no correct privileges.',
//         status: 403,
//         global: true
//     },
//     // If there is no status field, the default status is 500
//     FieldsError: {
//         id: 67003,
//         message: 'The format of fields is incorrect.',
//         global: true
//     }
// });
// 
// const errorInstance = new allErrors.InternalException({
//     content: 'this is details'
// });
// console.log(errorInstance);
// console.log(JSON.stringify(errorInstance));

class LogicalError extends Error {
    constructor(id, message, status, details) {
        super();

        Error.captureStackTrace(this, LogicalError);

        Object.defineProperty(this, '_id', {
            enumerable: false,
            writable: false,
            configurable: false,
            value: id
        });

        Object.defineProperty(this, '_message', {
            enumerable: false,
            writable: false,
            configurable: false,
            value: message
        });

        Object.defineProperty(this, '_status', {
            enumerable: false,
            writable: false,
            configurable: false,
            value: status
        });

        if ( details ) {
            Object.defineProperty(this, '_details', {
                enumerable: false,
                writable: false,
                configurable: false,
                value: details
            });
        }

        this.resetStack();
    }

    resetStack() {
        const stackLines = this.stack.split('\n');
        stackLines[0] = `LogicalError ${this._id}: ${this._message}`;
        this.stack = stackLines.join('\n');
    }

    get status() {
        return this._status;
    }

    toJSON() {
        const jsonObject = {
            id: this._id,
            message: this._message
        };

        if ( this._details ) {
            jsonObject.details = this._details;
        }

        return jsonObject;
    }
}

function defineLogicalError(options) {
    if ( !options.status ) {
        options.status = 500;
    }

    class ConcreteLogicalError extends LogicalError {
        constructor(details) {
            super(options.id, options.message, options.status, details);
        }
    }

    if ( options.global ) {
        module.exports[options.name] = ConcreteLogicalError;
    }

    return ConcreteLogicalError;
}

function defineLogicalErrors(errors) {
    const logicalErrors = Object.create(null);

    Object.keys(errors).forEach(errorName => {
        const errorOption = errors[errorName];
        errorOption.name = errorName;

        logicalErrors[errorName] = defineLogicalError(errorOption);
    });

    return logicalErrors;
}

module.exports = {
    defineLogicalError,
    defineLogicalErrors,
    LogicalError
};
