'use strict';

const http = require('http');
const https = require('https');
const ktoolkit = require('ktoolkit');
const getObjectValue = ktoolkit.core.misc.getObjectValue;
const logger = ktoolkit.logger.output;

const DefaultHost = '127.0.0.1';
const DefaultPort = 3000;

class Server {
    constructor(AppClass, options) {
        this._host = getObjectValue(options, 'host', DefaultHost);
        this._port = getObjectValue(options, 'port', DefaultPort);
        this._https = getObjectValue(options, 'https', false);
        this._credentials = getObjectValue(options, 'credentials', {});

        this._app = new AppClass();

        if (!this._https) {
            this._server = http.createServer(this._app.expressApp);
        }
        else {
            this._server = https.createServer(this._credentials, this._app.expressApp);
        }

        this._server.on('error', this.onError.bind(this));
        this._server.on('listening', this.onListening.bind(this));
    }

    async start() {
        await this._app.prepare();
        this._server.listen(this.port, this.host);
    }

    get host() {
        return this._host;
    }

    get port() {
        return this._port;
    }

    // Event listener for HTTP server "error" event.
    onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        const bind = typeof this._port === 'string' ?
            `Pipe ${this._port}` :
            `Port ${this._port}`;

        // Handle specific listen errors with friendly messages
        switch (error.code) {
        case 'EACCES':
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
        }
    }

    // Event listener for HTTP server "listening" event.
    onListening() {
        const addr = this._server.address();
        const bind = typeof addr === 'string' ?
            `pipe ${addr}` :
            `port ${addr.port}`;
        logger.info(`Server listen at ${bind}`);
    }
}

module.exports = {
    Server
};
