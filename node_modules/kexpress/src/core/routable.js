'use strict';

class Routable {
    constructor(instance) {
        this._instance = instance;
        this._prehandlers = [];
    }

    get instance() {
        return this._instance;
    }

    get prehandlers() {
        return this._prehandlers;
    }

    use(...args) {
        if ( args.length > 1 && args[1] instanceof Routable ) {
            args[1].prehandle(this._prehandlers);
            args[1] = args[1].instance;
        }

        this._instance.use(...args);

        return this;
    }

    get(url, action) {
        return this.handle('get', url, action, action);
    }

    post(url, action) {
        return this.handle('post', url, action, action);
    }

    put(url, action) {
        return this.handle('put', url, action, action);
    }

    patch(url, action) {
        return this.handle('patch', url, action, action);
    }

    delete(url, action) {
        return this.handle('delete', url, action, action);
    }

    prehandle(...args) {
        if ( args.length == 1 ) {
            const prehandlers = args[0];

            this._prehandlers = this._prehandlers.concat(prehandlers);
        }
        else if ( args.length > 1 ) {
            const key = args[0];
            const handler = args[1];

            this._prehandlers.push({
                key: key,
                handler: handler
            });
        }
    }

    handle(method, url, handler, action) {
        if ( action instanceof Function ) {
            this._instance[method](url, action);

            return this;
        }

        this._instance[method](url, action.expressHandler(this));

        return this;
    }
}

module.exports = {
    Routable: Routable
};
