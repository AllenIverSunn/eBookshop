const getObjectValue = require('./misc').getObjectValue;

function promisify(func) {
    return function(...args) {
        return new Promise((resolve, reject) => {
            function callback(error, data) {
                if ( error ) {
                    return reject(error);
                }

                return resolve(data);
            }

            args.push(callback);
            func.apply(this, args);
        });
    };
}

function promisifyModule(moduleObject, options) {
    options = parsePromisifyOptions(options);

    Object
    .keys(moduleObject)
    .filter(propertyName => {
        if ( options.includes.size > 0 && !options.includes.has(propertyName) ) {
            return false;
        }

        if ( options.excludes.size > 0 && options.excludes.has(propertyName) ) {
            return false;
        }

        return true;
    })
    .forEach(propertyName => {
        const property = moduleObject[propertyName];
        if ( !(property instanceof Function) ) {
            return;
        }

        moduleObject[`${options.prefix}${propertyName}${options.suffix}`] = promisify(property);
    });
}

function promisifyClass(classFunction, options) {
    options = parsePromisifyOptions(options);

    const proto = classFunction.prototype;
    Object.getOwnPropertyNames(proto)
    .filter(propertyName => {
        if ( propertyName === 'constructor' ) {
            return false;
        }

        if ( options.includes.size > 0 && !options.includes.has(propertyName) ) {
            return false;
        }

        if ( options.excludes.size > 0 && options.excludes.has(propertyName) ) {
            return false;
        }

        return true;
    })
    .forEach(propertyName => {
        const property = proto[propertyName];
        if ( !(property instanceof Function) ) {
            return;
        }

        proto[`${options.prefix}${propertyName}${options.suffix}`] = promisify(property);
    });
}

function _setTimeout(time, callback) {
    setTimeout(callback, time);
}

const sleep = promisify(_setTimeout);

function parsePromisifyOptions(options) {
    return {
        includes: new Set(getObjectValue(options, 'includes', [])),
        excludes: new Set(getObjectValue(options, 'excludes', [])),
        suffix: getObjectValue(options, 'suffix', 'Async'),
        prefix: getObjectValue(options, 'prefix', ''),
    };
}

module.exports = {
    promisify,
    promisifyModule,
    promisifyClass,
    sleep
};
